using System.Diagnostics;
using Microsoft.CodeAnalysis;

namespace BlastPDF.Template;

[Generator]
public class TemplateGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var templates = context.AdditionalTextsProvider
            .Where(static file => file.Path.EndsWith(".bxpdf"))
            .Select(static (file, cancellationToken) => 
                (path: file.Path, name: Path.GetFileNameWithoutExtension(file.Path), content: file.GetText(cancellationToken)?.ToString() ?? ""));
        
        context.RegisterSourceOutput(templates, (spc, template) =>
        {
            var values = new Lexer(template.content).Aggregate("",
                (result, item) =>
                    result + $">>> '{item.Lexeme.Replace("\"", "\"\"")}' {item.Type} Line: {item.Line.Item1} Column: {item.Column.Item1}\n");

            var ast = Parser.Parse(template.content);
            
            spc.AddSource($"BlastPDF.Template.{template.name}.g.cs", $@"// <auto-generated>
// This code was auto generated by BlastPDF.Template

using System;

public class {template.name} {{
    public static void OHYEAH() {{
        Console.WriteLine(""Okay I got the source generator working...."");
        Console.WriteLine(""TOKENS::::"");
        Console.WriteLine(@""{values}"");
        Console.WriteLine(""HELLO??????????????????"");
        Console.WriteLine(""AST::::"");
        Console.WriteLine(@""{ast.String()}"");
    }}
}}

");
        });
        
    }
}